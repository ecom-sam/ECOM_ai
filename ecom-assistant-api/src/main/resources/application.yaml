spring:


  application:
    name: ecom-assistant

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

  couchbase:
    connection-string: ${COUCHBASE_CONNECTION_STRINGS:localhost}
    username: ${COUCHBASE_USERNAME:Admin}
    password: ${COUCHBASE_PASSWORD:123456}

  data:
    couchbase:
      bucket-name: ${COUCHBASE_BUCKET_NAME:Embedding}
      scope-name: ${COUCHBASE_SCOPE_NAME:Testing}
      # auto-index: true  # 如果你需要啟用自動建立索引，取消註解這行

  cache:
    couchbase:
      scope-name: AI
      collection-name: cache

  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
#        base-url: https://api.groq.com/openai
#        api-key: ${GROK_API_KEY}
        options:
#          model: ${GROK_CHAT_MODEL:meta-llama/llama-4-maverick-17b-128e-instruct}
           model: gpt-4.1-mini
      embedding:
        options:
          model: text-embedding-3-small

    vectorstore:
      couchbase:
        initialize-schema: true
        bucket-name: ${spring.data.couchbase.bucket-name}
        scope-name: ${spring.data.couchbase.scope-name}
        collection-name: ${COUCHBASE_VECTOR_COLLECTION_NAME:document-vector}



file:
  upload-dir: ${FILE_UPLOAD_DIR:/tmp/uploads}

logging:
  level:
    org.springframework.ai.chat.client.advisor: DEBUG
    org.springframework.data.couchbase: DEBUG




etl:
  file-processing:
    default:
      reader: combinedPdfDocumentReader
      transformers: 
        - defaultTokenTextSplitter
      # 新增：位置排序配置
      enable-position-sorting: true
      position-tolerance: 5.0
      # 新增：圖片分析配置（預設關閉以提升效能）
      enable-image-analysis: true
      image-analysis-timeout: 360




# ========================================================================
# RAG (檢索增強生成) 分層檢索配置
# ========================================================================
# 用途：控制 QA-vector 和 document-vector 兩個向量資料庫的檢索順序
# QA-vector：儲存已驗證的問答對，提供精確答案
# document-vector：儲存原始文檔
# ========================================================================

rag:
  tiered-search:
    # ========================================================================
    # 總開關：是否啟用分層檢索
    # ========================================================================
    # true：啟用兩層檢索（QA + Document）
    # false：僅使用傳統的 document-vector 檢索
    enabled: true
    
    # ========================================================================
    # 🎯 核心功能：檢索優先順序控制
    # ========================================================================
    # qa-first：      優先搜尋 QA-vector，再補充 document-vector（推薦）
    # document-first： 優先搜尋 document-vector，再補充 QA-vector
    # qa-only：       僅搜尋 QA-vector（適用於只要精確答案的場景）
    # document-only：  僅搜尋 document-vector（適用於需要更多背景資訊的場景）
    priority: qa-first
    
    # ========================================================================
    # QA 向量檢索配置（已驗證的問答對）
    # ========================================================================
    qa-vector:
      # 是否啟用 QA 向量檢索
      enabled: true
      
      # QA 檢索返回的最大結果數（精確答案設小一點）
      top-k: 3
      
      # QA 搜尋策略：決定使用哪種技術搜尋 QA-vector
      # spring-ai-first：  優先使用 Spring AI VectorStore，失敗時切換到直接 FTS
      # direct-fts-first： 優先使用直接 FTS API，失敗時切換到 Spring AI（推薦）
      # spring-ai-only：   僅使用 Spring AI VectorStore
      # direct-fts-only：  僅使用直接 FTS API
      search-strategy: direct-fts-first
      
      # Spring AI VectorStore 配置（Spring框架的向量搜尋）
      spring-ai:
        # 是否啟用 Spring AI 方式
        enabled: true
        # 相似度閾值（0.0-1.0，越高越嚴格）
        similarity-threshold: 0.4
        
      # 直接 FTS API 配置（直接呼叫 Couchbase FTS）
      direct-fts:
        # 是否啟用直接 FTS 方式
        enabled: true
        # Couchbase FTS 索引名稱
        index-name: ECOM-AI-qa-vector-index
        
    # ========================================================================
    # Document 向量檢索配置（原始文檔切片）
    # ========================================================================
    document-vector:
      # 是否啟用 Document 向量檢索
      enabled: true
      
      # Document 檢索返回的最大結果數（通常設定較大，提供更多其他有的沒的）
      top-k: 6
      
      # 相似度閾值（0.0-1.0，越高越嚴格）
      similarity-threshold: 0.7
      
    # ========================================================================
    # 搜尋參數配置
    # ========================================================================
    search:
      # 總檢索結果的最大數量（QA + Document 的總和上限）
      max-total-results: 8
      
      # 自動降級開關：當首選檢索類型失敗時，是否自動切換到備用類型
      # true：失敗時自動降級（如 qa-first 失敗時改用 document-only）
      # false：失敗時不降級，直接返回空結果
      enable-fallback: true

# ========================================================================
# 配置範例說明：
# ========================================================================
# 1. 精確問答優先（推薦）：
#    priority: qa-first, qa-vector.top-k: 3, document-vector.top-k: 5
#    
# 2. 背景資訊優先：
#    priority: document-first, document-vector.top-k: 6, qa-vector.top-k: 2
#    
# 3. 純問答模式：
#    priority: qa-only, qa-vector.top-k: 5
#    
# 4. 純文檔模式：
#    priority: document-only, document-vector.top-k: 8
# ========================================================================
